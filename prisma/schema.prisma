// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  phone         String?
  role          UserRole  @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  bookings      Booking[]
  reviews       Review[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Activity models
model Activity {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  location    String
  address     String?
  latitude    Float?
  longitude   Float?
  price       Float
  duration    Int // in minutes
  minAge      Int
  maxAge      Int
  capacity    Int
  images      String[] // Array of image URLs
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hostId     String
  host       User       @relation(fields: [hostId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  bookings   Booking[]
  reviews    Review[]
  favorites  Favorite[]
  availabilities Availability[]
}

model Category {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  icon       String?
  activities Activity[]
}

model Availability {
  id         String   @id @default(cuid())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  date       DateTime
  startTime  String // "09:00"
  endTime    String // "11:00"
  capacity   Int
  booked     Int      @default(0)
  createdAt  DateTime @default(now())

  @@unique([activityId, date, startTime])
}

model Booking {
  id         String        @id @default(cuid())
  activityId String
  activity   Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       DateTime
  startTime  String
  endTime    String
  participants Int
  totalPrice Float
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating     Int // 1-5
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([activityId, userId])
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, activityId])
}

// Enums
enum UserRole {
  GUEST
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

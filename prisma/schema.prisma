generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Activity {
  id           String         @id
  title        String
  description  String
  location     String
  address      String?
  latitude     Float?
  longitude    Float?
  price        Float
  duration     Int
  minAge       Int
  maxAge       Int
  capacity     Int
  images       String[]
  featured     Boolean        @default(false)
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  hostId       String
  categoryId   String
  Category     Category       @relation(fields: [categoryId], references: [id])
  User         User           @relation(fields: [hostId], references: [id], onDelete: Cascade)
  Availability Availability[]
  Booking      Booking[]
  Favorite     Favorite[]
  Review       Review[]
}

model Availability {
  id         String   @id
  activityId String
  date       DateTime
  startTime  String
  endTime    String
  capacity   Int
  booked     Int      @default(0)
  createdAt  DateTime @default(now())
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([activityId, date, startTime])
}

model Booking {
  id              String        @id
  activityId      String
  userId          String
  date            DateTime
  startTime       String
  endTime         String
  participants    Int
  totalPrice      Float
  status          BookingStatus @default(PENDING)
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  Activity        Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id       String     @id
  name     String     @unique
  slug     String     @unique
  icon     String?
  Activity Activity[]
}

model Favorite {
  id         String   @id
  userId     String
  activityId String
  createdAt  DateTime @default(now())
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

model Review {
  id         String   @id
  activityId String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  phone         String?
  role          UserRole   @default(GUEST)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  Account       Account[]
  Activity      Activity[]
  Booking       Booking[]
  Favorite      Favorite[]
  Review        Review[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum UserRole {
  GUEST
  HOST
  ADMIN
}
